# define the C compiler to use
CC = ${data['cc']}
# define any compile-time flags
CFLAGS = ${data['cflags']}
# define any directories containing header files other than /usr/include -Ipath
INCLUDES = \
% for item in data['includes']:
	-I${item} \\

% endfor
# define library paths in addition to /usr/lib -Lpath
LFLAGS = \
% for item in data['lflags']:
	-L${item} \\

% endfor 
# define any libraries to link into executable -lname
LIBS = \
% for item in data['libs']:
	-l${item} \\

% endfor 
# define the C source files
SRCS = \
% for item in data['srcs']:
	${item} \\

% endfor
# define the C object files 
OBJS = $(SRCS:.c=.o)
# define the executable file 
MAIN = gidi

#
# The following part of the makefile is generic; it can be used to 
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

.PHONY: depend clean

all:    $(MAIN)
	@echo ${data['prj_name']} application has been compiled

$(MAIN): $(OBJS) 
	$(CC) $(CFLAGS) $(INCLUDES) -o $(MAIN) $(OBJS) $(LFLAGS) $(LIBS)

# this is a suffix replacement rule for building .o's from .c's
# it uses automatic variables $<: the name of the prerequisite of
# the rule(a .c file) and $@: the name of the target of the rule (a .o file) 
# (see the gnu make manual section about automatic variables)
.c.o:
	$(CC) $(CFLAGS) $(INCLUDES) -c $<  -o $@

clean:
	$(RM) *.o *~ $(MAIN)

depend: $(SRCS)
	makedepend $(INCLUDES) $^

# DO NOT DELETE THIS LINE -- make depend needs it
